[
["index.html", "Python for Data Science Welcome", " Python for Data Science J. Hathaway Welcome This is the port of the website for “R for Data Science” into Python. I am keeping Garrett Grolemund and Hadley Wickham’s writing and examples as much as possible while demonstrating Python instead of R. This book will teach you how to do data science with Python: You’ll learn how to get your data into Python, get it into the most useful structure, transform it, visualise it and model it. In this book, you will find a practicum of skills for data science. Just as a chemist learns how to clean test tubes and stock a lab, you’ll learn how to clean data and draw plots—and many other things besides. These are the skills that allow data science to happen, and here you will find the best practices for doing each of these things with R. You’ll learn how to use the grammar of graphics, literate programming, and reproducible research to save time. You’ll also learn how to manage cognitive resources to facilitate discoveries when wrangling, visualising, and exploring data. This website is (and will always be) free to use, and is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 License. The book is written in RMarkdown with bookdown. The orignial authors and contributors can be found here "],
["introduction.html", "1 Introduction 1.1 What you will learn 1.2 How this book is organised 1.3 What you won’t learn 1.4 Prerequisites 1.5 Running Python code 1.6 Getting help and learning more 1.7 Datasets access 1.8 Acknowledgements 1.9 Colophon", " 1 Introduction Data science is an exciting discipline that allows you to turn raw data into understanding, insight, and knowledge. The goal of “Python for Data Science” is to help you learn some of the tools in Python that will allow you to begin your data science journey. After reading this book, you’ll have the tools to tackle a wide variety of data science challenges, using the best parts of Python. 1.1 What you will learn Data science is a huge field, and there’s no way you can master it by reading a single book. The goal of this book is to give you a foundation in the essential tools. Our model of the tools needed in a typical data science project looks something like this: First you must import your data into Python. This typically means that you take data stored in a file, database, or web API, and load it into a data frame in Python. If you can’t get your data into Python, you can’t do data science on it! Once you’ve imported your data, it is a good idea to tidy it. Tidying your data means storing it in a consistent form that matches the semantics of the dataset with the way it is stored. In brief, when your data is tidy, each column is a variable, and each row is an observation. Tidy data is important because the consistent structure lets you focus your struggle on questions about the data, not fighting to get the data into the right form for different functions. Once you have tidy data, a common first step is to transform it. Transformation includes narrowing in on observations of interest (like all people in one city, or all data from the last year), creating new variables that are functions of existing variables (like computing speed from distance and time), and calculating a set of summary statistics (like counts or means). Together, tidying and transforming are called wrangling, because getting your data in a form that’s natural to work with often feels like a fight! Once you have tidy data with the variables you need, there are two main engines of knowledge generation: visualisation and modelling. These have complementary strengths and weaknesses so any real analysis will iterate between them many times. Visualisation is a fundamentally human activity. A good visualisation will show you things that you did not expect, or raise new questions about the data. A good visualisation might also hint that you’re asking the wrong question, or you need to collect different data. Visualisations can surprise you, but don’t scale particularly well because they require a human to interpret them. Models are complementary tools to visualisation. Once you have made your questions sufficiently precise, you can use a model to answer them. Models are a fundamentally mathematical or computational tool, so they generally scale well. Even when they don’t, it’s usually cheaper to buy more computers than it is to buy more brains! But every model makes assumptions, and by its very nature a model cannot question its own assumptions. That means a model cannot fundamentally surprise you. The last step of data science is communication, an absolutely critical part of any data analysis project. It doesn’t matter how well your models and visualisation have led you to understand the data unless you can also communicate your results to others. Surrounding all these tools is programming. Programming is a cross-cutting tool that you use in every part of the project. You don’t need to be an expert programmer to be a data scientist, but learning more about programming pays off because becoming a better programmer allows you to automate common tasks, and solve new problems with greater ease. You’ll use these tools in every data science project, but for most projects they’re not enough. There’s a rough 80-20 rule at play; you can tackle about 80% of every project using the tools that you’ll learn in this book, but you’ll need other tools to tackle the remaining 20%. Throughout this book we’ll point you to resources where you can learn more. 1.2 How this book is organised The previous description of the tools of data science is organised roughly according to the order in which you use them in an analysis (although of course you’ll iterate through them multiple times). In our experience, however, this is not the best way to learn them: Starting with data ingest and tidying is sub-optimal because 80% of the time it’s routine and boring, and the other 20% of the time it’s weird and frustrating. That’s a bad place to start learning a new subject! Instead, we’ll start with visualisation and transformation of data that’s already been imported and tidied. That way, when you ingest and tidy your own data, your motivation will stay high because you know the pain is worth it. Some topics are best explained with other tools. For example, we believe that it’s easier to understand how models work if you already know about visualisation, tidy data, and programming. Programming tools are not necessarily interesting in their own right, but do allow you to tackle considerably more challenging problems. We’ll give you a selection of programming tools in the middle of the book, and then you’ll see how they can combine with the data science tools to tackle interesting modelling problems. Within each chapter, we try and stick to a similar pattern: start with some motivating examples so you can see the bigger picture, and then dive into the details. Each section of the book is paired with exercises to help you practice what you’ve learned. While it’s tempting to skip the exercises, there’s no better way to learn than practicing on real problems. 1.3 What you won’t learn There are some important topics that this book doesn’t cover. We believe it’s important to stay ruthlessly focused on the essentials so you can get up and running as quickly as possible. That means this book can’t cover every important topic. 1.3.1 Big data This book proudly focuses on small, in-memory datasets. This is the right place to start because you can’t tackle big data unless you have experience with small data. The tools you learn in this book will easily handle hundreds of megabytes of data, and with a little care you can typically use them to work with 1-2 Gb of data. If you’re routinely working with larger data (10-100 Gb, say), you should learn more about data.table. This book doesn’t teach data.table because it has a very concise interface which makes it harder to learn since it offers fewer linguistic cues. But if you’re working with large data, the performance payoff is worth the extra effort required to learn it. If your data is bigger than this, carefully consider if your big data problem might actually be a small data problem in disguise. While the complete data might be big, often the data needed to answer a specific question is small. You might be able to find a subset, subsample, or summary that fits in memory and still allows you to answer the question that you’re interested in. The challenge here is finding the right small data, which often requires a lot of iteration. Another possibility is that your big data problem is actually a large number of small data problems. Each individual problem might fit in memory, but you have millions of them. For example, you might want to fit a model to each person in your dataset. That would be trivial if you had just 10 or 100 people, but instead you have a million. Fortunately each problem is independent of the others (a setup that is sometimes called embarrassingly parallel), so you just need a system (like Hadoop or Spark) that allows you to send different datasets to different computers for processing. Once you’ve figured out how to answer the question for a single subset using the tools described in this book, you learn new tools like sparklyr, rhipe, and ddr to solve it for the full dataset. 1.3.2 R, Julia, and friends In this book, you won’t learn anything about R, Julia, or any other programming language useful for data science. This isn’t because we think these tools are bad. They’re not! And in practice, most data science teams use a mix of languages, often at least R and Python. However, we strongly believe that it’s best to master one tool at a time. You will get better faster if you dive deep, rather than spreading yourself thinly over many topics. This doesn’t mean you should only know one thing, just that you’ll generally learn faster if you stick to one thing at a time. You should strive to learn new things throughout your career, but make sure your understanding is solid before you move on to the next interesting thing. We think Python is a great place to start your data science journey because it is an environment designed from the ground up to support data science. Python is not just a programming language, but it is also an interactive environment for doing data science. To support interaction, Python is a much more flexible language than many of its peers. 1.3.3 Non-rectangular data This book focuses exclusively on rectangular data: collections of values that are each associated with a variable and an observation. There are lots of datasets that do not naturally fit in this paradigm: including images, sounds, trees, and text. But rectangular data frames are extremely common in science and industry, and we believe that they are a great place to start your data science journey. 1.3.4 Hypothesis confirmation It’s possible to divide data analysis into two camps: hypothesis generation and hypothesis confirmation (sometimes called confirmatory analysis). The focus of this book is unabashedly on hypothesis generation, or data exploration. Here you’ll look deeply at the data and, in combination with your subject knowledge, generate many interesting hypotheses to help explain why the data behaves the way it does. You evaluate the hypotheses informally, using your scepticism to challenge the data in multiple ways. The complement of hypothesis generation is hypothesis confirmation. Hypothesis confirmation is hard for two reasons: You need a precise mathematical model in order to generate falsifiable predictions. This often requires considerable statistical sophistication. You can only use an observation once to confirm a hypothesis. As soon as you use it more than once you’re back to doing exploratory analysis. This means to do hypothesis confirmation you need to “preregister” (write out in advance) your analysis plan, and not deviate from it even when you have seen the data. We’ll talk a little about some strategies you can use to make this easier in modelling. It’s common to think about modelling as a tool for hypothesis confirmation, and visualisation as a tool for hypothesis generation. But that’s a false dichotomy: models are often used for exploration, and with a little care you can use visualisation for confirmation. The key difference is how often do you look at each observation: if you look only once, it’s confirmation; if you look more than once, it’s exploration. 1.4 Prerequisites We’ve made a few assumptions about what you already know in order to get the most out of this book. You should be generally numerically literate, and it’s helpful if you have some programming experience already. There are four things you need to run the code in this book: Python, VS Code, and a handful of other packages. Packages are the fundamental units of reproducible Python code. They include reusable functions, the documentation that describes how to use them, and sample data. 1.4.1 Python To download Python, go to python.org and download Python for your OS. A new major version of Python is released every few years, and there are 5-12 minor releases each year. 1.4.2 Visual Studio Code (VS Code) Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). Begin your journey with VS Code with these introductory videos. Microsoft provides a great overview of VS Code in their docs. When you use VS code, you’ll have four key regions in the interface: VS Code comes with a simple and intuitive layout that maximizes the space provided for the editor while leaving ample room to browse and access the full context of your folder or project. The UI is divided into five areas: Editor - The main area to edit your files. You can open as many editors as you like side by side vertically and horizontally. Side Bar - Contains different views like the Explorer to assist you while working on your project. Status Bar - Information about the opened project and the files you edit. Activity Bar - Located on the far left-hand side, this lets you switch between views and gives you additional context-specific indicators, like the number of outgoing changes when Git is enabled. Panels - You can display different panels below the editor region for output or debug information, errors and warnings, or an integrated terminal. Panel can also be moved to the right for more vertical space. Each time you start VS Code, it opens up in the same state it was in when you last closed it. The folder, layout, and opened files are preserved. 1.4.2.1 VS Code Python Extension Install the Python extension for VS Code from the Visual Studio Marketplace. For additional details on installing extensions, see Extension Marketplace. The Python extension is named Python and it’s published by Microsoft. You can follow more of their tutorial at code.visualstudio.com. The third video and fourth video in this Python for Beginners set of videos done by Microsoft can also guide you through the Python Extension. 1.4.2.2 VS Code Interactive Python Window An open-source project called Jupyter is the standard method for interactive Python use for data science or scientific computing. However, there are some issues with its use in a development environment. VS Code has provided a way for us to have the best of Python and Jupyter Notebooks with their Python Interactive Window. You will need to install the jupyter python package using pip or pip3 for the interactive Python window to work. See the following section for guidance on using pip. Using the VS Code functionality, you will work with a standard .py file instead of the .ipynb extension typically used with jupyter notebooks. The Python extension in VS Code will recognize # %% as a cell or chunk of python code and add notebook options to ‘Run Cell’ as well as other actions. You can see the code example bellow with the image of the view in VS Code as an example. Microsoft’s documentation goes into more detail (https://code.visualstudio.com/docs/python/jupyter-support-py). # %% msg = &quot;Hello World&quot; print(msg) # %% msg = &quot;Hello again&quot; print(msg) 1.4.3 Package Management (pip) You can install a standard set of data science python packages using pip. However, there are some complications using pip on computers with multiple versions of Python. pip: If your path environment is correct, then a standard pip install [package] will work. This is how most packages direct users to install Python packages. pip3: If your OS has Python 2 and Python 3 installed, you may need to use pip3 install [package]. Force Python version: You can run the pip related to a specific Python installation by using python -m pip install [package]. Some may need to provide the path to their Python installation if your Python path environment is not understood. A few cautions about package management with pip. Never run sudo pip install. If you don’t have root permissions or the OS package manager doesn’t have the package you need, use pip install --user. If you want multiple versions of the same library to coexist, to do Python development, or to isolate dependencies for any other reason, use virtual environments. Generally, you will want to update pip before installing packages - python -m pip install --user --upgrade pip setuptools wheel Conda, poetry, and pipenv are three other options for package management. However, we will focus on using pip. 1.4.3.1 pip package installation examples If we wanted to install the numpy, pandas, xlrd, matplolib, and seaborn packages, we would use pip. Depending on your OS configuration, one of the following should work. Everything in your path is clean and you are an admin on your computer pip install numpy pandas xlrd matplotlib seaborn Everything in your path is clean and you want to install package for the user pip install --user numpy pandas xlrd matplotlib seaborn You have multiple Python versions installed you want to install package for the user without a need to understand which pip maps to which Python python -m pip install --user numpy pandas xlrd matplotlib seaborn 1.4.4 The Data Science Packages You’ll also need to install some Python packages. A Python package is a collection of functions, data, and documentation that extends the capabilities of base Python. Using packages is key to the successful use of Python for data science. The majority of the packages that you will learn in this book are related to the so-called tidyverse packages in R. There are attempts to port they tidyverse package process into Python. We are not showing the tools that recreate the tidyverse in Python but those that current Data Scientists use to do equivelent work in Python. You will notice that pandas is the primary tool with a few packages that come with base Python. Pandas user guide will be referenced heavily as we progress. R Tidyverse Package Python Package dplyr pandas tidyr pandas tibble pandas stringr string and re forcats pandas categorical data readr pandas io tools readxl xlrd and openpyxl ggplot2 seaborn, altair, plotnine purrr built in map function base R stats package statsmodels tidymodels scikit-learn R tensorflow tensorflow R keras keras rmarkdown jupyter Notice that the visualization space in Python does not have a force like ggplot2. Chris Moffitt provided an efficient visualization tools diagram to help Python users with this decision. The following packages will give us a broad data science toolset in Python. pip install numpy pandas xlrd matplotlib pip install seaborn plotnine altair vega_datasets pip install statsmodels scikit-learn pip install jupyter On your computer, type that above of code in the command line. The Python package manager pip will download the packages from PyPi and install them on to your computer. If you have problems installing, make sure that you are connected to the internet. You will not be able to use the functions and objects in a package until you load it with import. It is common in Python for each package to have a standard abbreviated name. For example, numpy is imported as ‘np’, and pandas is imported as ‘pd’ in the code chunk below. import numpy as np import pandas as pd import string import re import matplotlib import matplotlib.pyplot as plt import seaborn as sns from plotnine import * import altair as alt There are many other excellent packages that are not included here. 1.5 Running Python code The previous section showed you a couple of examples of running Python code. Code in the book looks like this: 1 + 2 #&gt; 3 #&gt; 3 If you run the same code in interactive python with VS Code, it will look like this: [1] 1 + 2 3 The Python Interactive window can be used as a standalone console with arbitrary code (with or without code cells). To use the window as a console, open it with the Python: Show Python Interactive window command from the Command Palette. You can then type in code, using Enter to go to a new line and Shift+Enter to run the code. There are two main differences. In your interactive window, you type after the [#]; we don’t show the line number in the book. In the book, output is commented out with #&gt;; in your console it appears directly after your code. These two differences mean that if you’re working with an electronic version of the book, you can easily copy code out of the book and into the interactive window. Throughout the book we use a consistent set of conventions to refer to code: Functions are in a code font and followed by parentheses, like sum(), or mean(). Other R objects (like data or function arguments) are in a code font, without parentheses, like flights or x. 1.6 Getting help and learning more This book is not an island; there is no single resource that will allow you to master Python for data science. As you start to apply the techniques described in this book to your own data you will soon find questions that we do not answer. This section describes a few tips on how to get help, and to help you keep learning. If you get stuck, start with Google. Typically adding “python” to a query is enough to restrict it to relevant results: if the search isn’t useful, it often means that there aren’t any Python-specific results available. Google is particularly useful for error messages. If you get an error message and you have no idea what it means, try googling it! Chances are that someone else has been confused by it in the past, and there will be help somewhere on the web. (If the error message isn’t in English, run Sys.setenv(LANGUAGE = \"en\") and re-run the code; you’re more likely to find help for English error messages.) If Google doesn’t help, try stackoverflow. Start by spending a little time searching for an existing answer, including [python] to restrict your search to questions and answers that use Python. If you don’t find anything useful, prepare a minimal reproducible example or reprex. A good reprex makes it easier for other people to help you, and often you’ll figure out the problem yourself in the course of making it. There are three things you need to include to make your example reproducible: required packages, data, and code. Packages should be imported at the top of the script, so it’s easy to see which ones the example needs. This is a good time to check that you’re using the latest version of each package; it’s possible you’ve discovered a bug that’s been fixed since you installed the package. The easiest way to include data in a question is to create a minimal example to that recreates it. Try and find the smallest subset of your data that still reveals the problem. Spend a little bit of time ensuring that your code is easy for others to read: Make sure you’ve used spaces and your variable names are concise, yet informative. Use comments to indicate where your problem lies. Do your best to remove everything that is not related to the problem. The shorter your code is, the easier it is to understand, and the easier it is to fix. Finish by checking that you have actually made a reproducible example by starting a fresh Python session to run your script in. You should also spend some time preparing yourself to solve problems before they occur. Investing a little time in learning Python each day will pay off handsomely in the long run. One way is to follow what Wes McKinney, Garrett, and everyone else at RStudio are doing on the Pandas blog or the ossdata blog. This is where they post announcements about new packages and new IDE features. You might also want to follow Wes McKinney (@wesmckinn) on Twitter, or follow @code to keep up with new features in VS Code. To keep up with the data science community more broadly, we recommend reading https://planet.scipy.org/#. If you’re an active Twitter user, follow the #datascience hashtag. 1.7 Datasets access The data used in R for Data Science is generally within the R packages themselves. Many of the Python data science packages also come with datasets upon import. However, we will use the original datasets presented in R for Data Science. We have a data4python4ds GitHub data repository that contains all the datasets in varied file formats and all examples will use Pandas to read the data from GitHub. 1.8 Acknowledgements The text of this book is largely the product of Hadley and Garrett. J. Hathaway has ported the code and descriptions for using VS Code. You can see the original acknowledgements here. 1.9 Colophon An online version of this book is available at https://byuidatascience.github.io/python4ds/. It will continue to evolve. The source of the book is available at https://github.com/byuidatascience/python4ds. The book is powered by https://bookdown.org which makes it easy to turn R markdown files into HTML, PDF, and EPUB. This book was built with: sessioninfo::session_info() #&gt; ─ Session info ─────────────────────────────────────────────────────────────── #&gt; setting value #&gt; version R version 3.6.3 (2020-02-29) #&gt; os macOS Catalina 10.15.4 #&gt; system x86_64, darwin15.6.0 #&gt; ui X11 #&gt; language (EN) #&gt; collate en_US.UTF-8 #&gt; ctype en_US.UTF-8 #&gt; tz America/Boise #&gt; date 2020-05-13 #&gt; #&gt; ─ Packages ─────────────────────────────────────────────────────────────────── #&gt; package * version date lib source #&gt; assertthat 0.2.1 2019-03-21 [1] CRAN (R 3.6.0) #&gt; backports 1.1.6 2020-04-05 [1] CRAN (R 3.6.3) #&gt; bookdown 0.18 2020-03-05 [1] CRAN (R 3.6.0) #&gt; broom 0.5.6 2020-04-20 [1] CRAN (R 3.6.2) #&gt; cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.6.0) #&gt; cli 2.0.2 2020-02-28 [1] CRAN (R 3.6.0) #&gt; codetools 0.2-16 2018-12-24 [1] CRAN (R 3.6.3) #&gt; colorspace 1.4-1 2019-03-18 [1] CRAN (R 3.6.0) #&gt; crayon 1.3.4 2017-09-16 [1] CRAN (R 3.6.0) #&gt; DBI 1.0.0 2018-05-02 [1] CRAN (R 3.6.0) #&gt; dbplyr 1.4.2 2019-06-17 [1] CRAN (R 3.6.0) #&gt; digest 0.6.25 2020-02-23 [1] CRAN (R 3.6.0) #&gt; dplyr * 0.8.5 2020-03-07 [1] CRAN (R 3.6.0) #&gt; ellipsis 0.3.0 2019-09-20 [1] CRAN (R 3.6.0) #&gt; evaluate 0.14 2019-05-28 [1] CRAN (R 3.6.0) #&gt; fansi 0.4.1 2020-01-08 [1] CRAN (R 3.6.0) #&gt; forcats * 0.5.0 2020-03-01 [1] CRAN (R 3.6.1) #&gt; fs 1.4.1 2020-04-04 [1] CRAN (R 3.6.3) #&gt; generics 0.0.2 2018-11-29 [1] CRAN (R 3.6.0) #&gt; ggplot2 * 3.3.0 2020-03-05 [1] CRAN (R 3.6.1) #&gt; glue 1.4.0 2020-04-03 [1] CRAN (R 3.6.3) #&gt; gtable 0.3.0 2019-03-25 [1] CRAN (R 3.6.0) #&gt; haven 2.2.0 2019-11-08 [1] CRAN (R 3.6.0) #&gt; hms 0.5.3 2020-01-08 [1] CRAN (R 3.6.0) #&gt; htmltools 0.4.0 2019-10-04 [1] CRAN (R 3.6.0) #&gt; httr 1.4.1 2019-08-05 [1] CRAN (R 3.6.0) #&gt; jsonlite 1.6.1 2020-02-02 [1] CRAN (R 3.6.0) #&gt; knitr 1.28 2020-02-06 [1] CRAN (R 3.6.0) #&gt; lattice 0.20-38 2018-11-04 [1] CRAN (R 3.6.3) #&gt; lifecycle 0.2.0 2020-03-06 [1] CRAN (R 3.6.0) #&gt; lubridate 1.7.4 2018-04-11 [1] CRAN (R 3.6.0) #&gt; magrittr 1.5 2014-11-22 [1] CRAN (R 3.6.0) #&gt; modelr 0.1.5 2019-08-08 [1] CRAN (R 3.6.0) #&gt; munsell 0.5.0 2018-06-12 [1] CRAN (R 3.6.0) #&gt; nlme 3.1-144 2020-02-06 [1] CRAN (R 3.6.3) #&gt; pillar 1.4.4 2020-05-05 [1] CRAN (R 3.6.2) #&gt; pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 3.6.0) #&gt; purrr * 0.3.4 2020-04-17 [1] CRAN (R 3.6.2) #&gt; R6 2.4.1 2019-11-12 [1] CRAN (R 3.6.1) #&gt; Rcpp 1.0.4.6 2020-04-09 [1] CRAN (R 3.6.3) #&gt; readr * 1.3.1 2018-12-21 [1] CRAN (R 3.6.0) #&gt; readxl 1.3.1 2019-03-13 [1] CRAN (R 3.6.0) #&gt; reprex 0.3.0 2019-05-16 [1] CRAN (R 3.6.0) #&gt; reticulate 1.14 2019-12-17 [1] CRAN (R 3.6.1) #&gt; rlang 0.4.6 2020-05-02 [1] CRAN (R 3.6.2) #&gt; rmarkdown 2.1.3 2020-05-07 [1] Github (rstudio/rmarkdown@d7e1bda) #&gt; rstudioapi 0.11 2020-02-07 [1] CRAN (R 3.6.0) #&gt; rvest 0.3.5 2019-11-08 [1] CRAN (R 3.6.0) #&gt; scales 1.1.0 2019-11-18 [1] CRAN (R 3.6.0) #&gt; sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 3.6.0) #&gt; stringi 1.4.6 2020-02-17 [1] CRAN (R 3.6.0) #&gt; stringr * 1.4.0 2019-02-10 [1] CRAN (R 3.6.0) #&gt; tibble * 3.0.1 2020-04-20 [1] CRAN (R 3.6.2) #&gt; tidyr * 1.0.3 2020-05-07 [1] CRAN (R 3.6.2) #&gt; tidyselect 1.0.0 2020-01-27 [1] CRAN (R 3.6.0) #&gt; tidyverse * 1.3.0 2019-11-21 [1] CRAN (R 3.6.0) #&gt; vctrs 0.2.4 2020-03-10 [1] CRAN (R 3.6.0) #&gt; withr 2.2.0 2020-04-20 [1] CRAN (R 3.6.2) #&gt; xfun 0.13 2020-04-13 [1] CRAN (R 3.6.2) #&gt; xml2 1.3.2 2020-04-23 [1] CRAN (R 3.6.2) #&gt; yaml 2.2.1 2020-02-01 [1] CRAN (R 3.6.0) #&gt; #&gt; [1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library "],
["explore-intro.html", "2 Introduction", " 2 Introduction The goal of the first part of this book is to get you up to speed with the basic tools of data exploration as quickly as possible. Data exploration is the art of looking at your data, rapidly generating hypotheses, quickly testing them, then repeating again and again and again. The goal of data exploration is to generate many promising leads that you can later explore in more depth. In this part of the book you will learn some useful tools that have an immediate payoff: Visualisation is a fun place to start with Python programming, because the payoff is so clear: you get to make elegant and informative plots that help you understand data. In data visualisation you’ll dive into visualisation, learning the basic structure of a pandas plot, and powerful techniques for turning data into plots. Visualisation alone is typically not enough, so in [data transformation] you’ll learn the key verbs that allow you to select important variables, filter out key observations, create new variables, and compute summaries. Finally, in [exploratory data analysis], you’ll combine visualisation and transformation with your curiosity and scepticism to ask and answer interesting questions about data. Modelling is an important part of the exploratory process, but you don’t have the skills to effectively learn or apply it yet. We’ll come back to it in modelling, once you’re better equipped with more data wrangling and programming tools. Nestled among these three chapters that teach you the tools of exploration are three chapters that focus on your Python workflow. In [workflow: basics], [workflow: scripts], and [workflow: projects] you’ll learn good practices for writing and organising your R code. These will set you up for success in the long run, as they’ll give you the tools to stay organised when you tackle real projects. "],
["data-visualisation.html", "3 Data visualisation 3.1 Introduction 3.2 First steps 3.3 Aesthetic mappings 3.4 Common problems 3.5 Facets 3.6 Geometric objects 3.7 Statistical transformations", " 3 Data visualisation 3.1 Introduction “The simple graph has brought more information to the data analyst’s mind than any other device.” — John Tukey This chapter will teach you how to visualise your data using Altair. Python has several systems for making graphs, but altiar is one of the most elegant and versatile. Altair implements the declarative visualization much like the grammar of graphics, a coherent system for describing and building graphs. With altair, you can do more faster by learning one system and applying it in many places. If you’d like to learn more about Altair before you start, I’d recommend reading “Altair: Interactive Statistical Visualizations for Python”, https://joss.theoj.org/papers/10.21105/joss.01057.pdf. We should note that we are building this book using R with the package bookdown. Rendering Altair graphics using a python chunk is not straight forward but is not important for our use in VS Code. In VS Code the example chunks will render in the interactive Python viewer automatically. The following R code chunks show how we are rendering the Altair graphics in this book. Thanks to ijlyttle for his GitHub Gist. # ```{R, echo=FALSE} # vegawidget::as_vegaspec(py$chart$to_json()) # ``` # For Python examples that show chart.save() #```{r, message = FALSE, echo=FALSE} #knitr::include_graphics(&quot;screenshots/chartp_chartleft.png&quot;) #``` 3.1.1 Prerequisites This chapter focusses on Altair. Language has been shifted using the material from Altair’s materials. To access the datasets, help pages, and functions that we will use in this chapter, load the Python data science tools by running this code: import pandas as pd import altair as alt If you run this code and get the error message “No module named ‘altair’” or “No module named ‘pandas’”, you’ll need to first install them. python -m pip install pandas altair You only need to install a package once, but you need to reload it every time you start a new session. 3.1.2 Altair data management When specifying data in Altair, we can use pandas DataFrame objects or other Altair options. According to the Altair documentation, the use of a pandas DataFrame will prompt Altair to store the entire data set in JSON format in the chart object. You should be carefully creating Altair specs with all the data in the chart object for use in HTML or Jupyter Notebooks. If you try to plot a data set with more than 5000 rows, Altair will return a maxRowsError. In this book, we will save the Altair chart as a ‘.png’ file to avoid dealing with large stored data in our ‘.html’ files. We have elected to use the Local Filesystem approach proposed by Altair. They do note that the filesystem approach may not work on some cloud-based Jupyter notebook services. alt.data_transformers.enable(&#39;json&#39;) #&gt; DataTransformerRegistry.enable(&#39;json&#39;) 3.2 First steps Let’s use our first graph to answer a question: Do cars with big engines use more fuel than cars with small engines? You probably already have an answer, but try to make your answer precise. What does the relationship between engine size and fuel efficiency look like? Is it positive? Negative? Linear? Nonlinear? 3.2.1 The mpg data frame You can test your answer with the mpg data frame found in ggplot2 (aka ggplot2::mpg). A data frame is a rectangular collection of variables (in the columns) and observations (in the rows). The ‘mpg’ data contains observations collected by the US Environmental Protection Agency on 38 models of car. We will identify the ‘mpg’ data using mpg for the remainder of this introduction. mpg = pd.read_csv(&quot;https://github.com/byuidatascience/data4python4ds/raw/master/data-raw/mpg/mpg.csv&quot;) Among the variables in mpg are: displ, a car’s engine size, in litres. hwy, a car’s fuel efficiency on the highway, in miles per gallon (mpg). A car with a low fuel efficiency consumes more fuel than a car with a high fuel efficiency when they travel the same distance. To learn more about mpg, read informat at data4python4ds. 3.2.2 Creating an Altair plot To plot mpg, run this code to put displ on the x-axis and hwy on the y-axis: chart = (alt.Chart(mpg). encode( x=&#39;displ&#39;, y=&#39;hwy&#39;). mark_point() ) The plot shows a negative relationship between engine size (displ) and fuel efficiency (hwy). In other words, cars with big engines use more fuel. Does this confirm or refute your hypothesis about fuel efficiency and engine size? With Altair, you begin a plot with the function Chart(). Chart() creates a Chart object that you can add layers to. The only argument of Chart() is the dataset to use in the graph. So Chart(mpg) creates an Chart object upon which we can marks. You complete your graph by adding one or more marks to Chart(). The attribute mark_point() adds a layer of points to your plot, which creates a scatterplot. Altair comes with many mark methods that each add a different type of layer to a plot. You’ll learn a whole bunch of them throughout this chapter. Each mark method in Altair has an encode() attribute. This defines how variables in your dataset are encoded to visual properties. The encode() method is always paired with x and y arguments to specify which variables to map to the x and y axes. Altair looks for the encoded variables in the data argument, in this case, mpg. For pandas dataframes, Altair automatically determines the appropriate data type for the mapped column. 3.2.3 A graphing template Let’s turn this code into a reusable template for making graphs with ggplot2. To make a graph, replace the bracketed sections in the code below with a dataset, a geom function, or a collection of mappings. (alt.Chart(&lt;DATA&gt;). &lt;mark_*().&gt; encode(&lt;ENCODINGS&gt;)) The rest of this chapter will show you how to complete and extend this template to make different types of graphs. We will begin with the &lt;ENCODINGS&gt; component. 3.2.4 Exercises Run Chart(mpg).mark_points(). What do you see? How many rows are in mpg? How many columns? What does the drv variable describe? Make a scatterplot of hwy vs cyl. What happens if you make a scatterplot of class vs drv? Why is the plot not useful? 3.3 Aesthetic mappings “The greatest value of a picture is when it forces us to notice what we never expected to see.” — John Tukey In the plot below, one group of points (highlighted in red) seems to fall outside of the linear trend. These cars have a higher mileage than you might expect. How can you explain these cars? Let’s hypothesize that the cars are hybrids. One way to test this hypothesis is to look at the class value for each car. The class variable of the mpg dataset classifies cars into groups such as compact, midsize, and SUV. If the outlying points are hybrids, they should be classified as compact cars or, perhaps, subcompact cars (keep in mind that this data was collected before hybrid trucks and SUVs became popular). You can add a third variable, like class, to a two dimensional scatterplot by mapping it to an encoding. An encoding is a visual property of the objects in your plot. Encodings include things like the size, the shape, or the color of your points. You can display a point (like the one below) in different ways by changing the values of its encoded properties. Since we already use the word “value” to describe data, let’s use the word “level” to describe encoded properties. Here we change the levels of a point’s size, shape, and color to make the point small, triangular, or blue: You can convey information about your data by mapping the encodings in your plot to the variables in your dataset. For example, you can map the colors of your points to the class variable to reveal the class of each car. chart = (alt.Chart(mpg). mark_point(). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, color = &quot;class&quot; ) ) (We don’t prefer British English, like Hadley, so don’t use colour instead of color.) To map an encoding to a variable, associate the name of the encoding to the name of the variable inside encode(). Altair will automatically assign a unique level of the encoding (here a unique color) to each unique value of the variable, a process known as scaling. Altair will also add a legend that explains which levels correspond to which values. The colors reveal that many of the unusual points are two-seater cars. These cars don’t seem like hybrids, and are, in fact, sports cars! Sports cars have large engines like SUVs and pickup trucks, but small bodies like midsize and compact cars, which improves their gas mileage. In hindsight, these cars were unlikely to be hybrids since they have large engines. In the above example, we mapped class to the color encoding, but we could have mapped class to the size encoding in the same way. In this case, the exact size of each point would reveal its class affiliation. Mapping an unordered variable (class) to an ordered aesthetic (size) is not a good idea. chart = (alt.Chart(mpg). mark_point(). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, size = &quot;class&quot; ) ) Or we could have mapped class to the opacity encoding, which controls the transparency of the points, or to the shape encoding, which controls the shape of the points. # First chart1 = (alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, opacity = &quot;class&quot; ) ) # Second chart2 = (alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, shape = &quot;class&quot; ) ) chart1.save(&quot;screenshots/altair_opacity.png&quot;) #&gt; WARN Channel opacity should not be used with an unsorted discrete field. chart2.save(&quot;screenshots/altair_shape.png&quot;) Altair will only use 8 shapes for one chart. Charting more than 8 shapes is not recommended as the shapes simply recycle. For each encoding, you use encode() to associate the name of the encoding with a variable to display. The encode() function gathers together each of the encoded mappings used by a layer and passes them to the layer’s mapping argument. The syntax highlights a useful insight about x and y: the x and y locations of a point are themselves encodings, visual properties that you can map to variables to display information about the data. Once you map an encoding, Altair takes care of the rest. It selects a reasonable scale to use with the encoding, and it constructs a legend that explains the mapping between levels and values. For x and y aesthetics, Altair does not create a legend, but it creates an axis line with tick marks and a label. The axis line acts as a legend; it explains the mapping between locations and values. You can also configure the encoding properties of your mark manually. For example, we can make all of the points in our plot blue: chart = (alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, color = alt.value(&quot;blue&quot;) ) ) Here, the color doesn’t convey information about a variable, but only changes the appearance of the plot. To set an encoding manually, use alt.value() by name as an argument of your encode() function; i.e. the value goes inside of alt.value(). You’ll need to pick a level that makes sense for that encoding: The name of a color as a character string. The size of a point in pixels. The shape of a point as a character string. Note that only a limited set of mark properties can be bound to encodings, so for some (e.g. fillOpacity, strokeOpacity, etc.) the encoding approach using alt.value() is not available. Encoding settings will always override local or global configuration settings. There are other methods for manually encoding properties as explained in the Altair documentation 3.3.1 Exercises Which variables in mpg are categorical? Which variables are continuous? How can you see this information when you run mpg? (Hint mpg.dtypes) Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables? What happens if you map the same variable to multiple encodings? What does the stroke encoding do? What shapes does it work with? (Hint: use mark_point()) 3.4 Common problems As you start to run Python code, you’re likely to run into problems. Don’t worry — it happens to everyone. I have been writing Python code for months, and every day I still write code that doesn’t work! Start by carefully comparing the code that you’re running to the code in the book. Python is extremely picky, and a misplaced character can make all the difference. Make sure that every ( is matched with a ) and every \" is paired with another \". One common problem when creating Altair graphics as shown in this book, is to put the () in the wrong place: the ( comes before the alt.chart() command and the ) has to come at the end of the command. For example the code below works in Python. alt.Chart(mpg).mark_point(filled = True).encode(x = &quot;displ&quot;, y = &quot;hwy&quot;) However, the complexity of the more details graphics necessicates placing the code on multiple lines. When using multiple lines we need the enclosing (). Make sure you haven’t accidentally excluded a ( or ) like this (alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;) or placed the () incorrectly like this (chart = alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;) ) If you’re still stuck, try the help. You can get help about any Altair function from their website - https://altair-viz.github.io/, or hovering over the function name in VS Code. If that doesn’t help, carefully read the error message. Sometimes the answer will be buried there! But when you’re new to Python, the answer might be in the error message but you don’t yet know how to understand it. Another great tool is Google: try googling the error message, as it’s likely someone else has had the same problem, and has gotten help online. 3.5 Facets One way to add additional variables is with encodings. Another way, particularly useful for categorical variables, is to split your plot into facets, subplots that each display one subset of the data. To facet your plot by a single variable, use facet(). The first argument of facet() is . The variable that you pass to facet_wrap() should be discrete. chart_f = (alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, ). facet( facet = &quot;class&quot;, columns = 4 ) ) chart_f.save(&quot;screenshots/altair_facet_1.png&quot;) To facet your plot on the combination of two variables, The first argument of facet() is also column and the second is row. This time the formula should contain two variable names. chart_f2 = (alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, ). facet( column = &quot;drv&quot;, row = &quot;cyl&quot; ) ) chart_f2.save(&quot;screenshots/altair_facet_2.png&quot;) #&gt; WARN row encoding should be discrete (ordinal / nominal / binned). If you prefer to not facet in the rows or columns dimension, simply remove that facet argument. You can read more about compound charts in the Altair documentation. 3.5.1 Exercises What happens if you facet on a continuous variable? What do the empty cells in plot with facet(column = \"drv\", row = \"cyl\") mean? How do they relate to this plot? (alt.Chart(mpg). mark_point(). encode( x = &quot;drv&quot;, y = &quot;cyl&quot;) ) What plots does the following code make? What does . do? (alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;). facet(column = &quot;drv&quot;) ) (alt.Chart(mpg). mark_point(filled = True). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;). facet(row = &quot;cyl&quot;) ) Take the first faceted plot in this section: What are the advantages to using faceting instead of the colour aesthetic? What are the disadvantages? How might the balance change if you had a larger dataset? When using facet() you should usually put the variable with more unique levels in the columns. Why? 3.6 Geometric objects How are these two plots similar? chartp = (alt.Chart(mpg). mark_point(). encode( x = &quot;displ&quot;, y = &quot;hwy&quot; ) ) chartf = (alt.Chart(mpg). encode( x = &quot;displ&quot;, y = &quot;hwy&quot; ). transform_loess(&quot;displ&quot;, &quot;hwy&quot;). mark_line() ) chartp.save(&quot;screenshots/altair_basic_points.png&quot;) chartf.save(&quot;screenshots/altair_smooth_line.png&quot;) Both plots contain the same x variable, the same y variable, and both describe the same data. But the plots are not identical. Each plot uses a different visual object to represent the data. In Altair syntax, we say that they use different marks. A mark is the geometrical object that a plot uses to represent data. People often describe plots by the type of mark that the plot uses. For example, bar charts use bar marks, line charts use line marks, boxplots use boxplot marks, and so on. Scatterplots break the trend; they use the point mark. As we see above, you can use different marks to plot the same data. The first plot uses the point mark, and the second plot uses the line mark, a smooth line fitted to the data is calculated using a transformation. To change the mark in your plot, change the mark function that you add to Chart(). Every mark function in Altair has encode arguments. However, not every encoding works with every mark. You could set the shape of a point, but you couldn’t set the “shape” of a line. On the other hand, you could set the type of line. mark_line() will draw a different line, with a different strokeDash, for each unique value of the variable that you map to strokeDash. chartl = (alt.Chart(mpg). transform_loess(&quot;displ&quot;, &quot;hwy&quot;, groupby = [&quot;drv&quot;]). mark_line(). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, strokeDash = &quot;drv&quot; ) ) chartl.save(&quot;screenshots/altair_dashed_lines.png&quot;) Here mark_line() separates the cars into three lines based on their drv value, which describes a car’s drivetrain. One line describes all of the points with a 4 value, one line describes all of the points with an f value, and one line describes all of the points with an r value. Here, 4 stands for four-wheel drive, f for front-wheel drive, and r for rear-wheel drive. If this sounds strange, we can make it more clear by overlaying the lines on top of the raw data and then coloring everything according to drv. Notice that this plot contains two marks in the same graph! If this makes you excited, buckle up. We will learn how to place multiple marks on the same chart very soon. Altair provides about 15 marks. The best way to get a comprehensive overview is the Altair marks page, which you can find at https://altair-viz.github.io/user_guide/marks.html. Many marks, like mark_line(), use a single mark object to display multiple rows of data. For these marks, you can set the detail encoding to a categorical variable to draw multiple objects. Altair will draw a separate object for each unique value of the detail variable. In practice, Altair will automatically group the data for these marks whenever you map an encoding to a discrete variable (as in the strokeDash example). It is convenient to rely on this feature because the detail encoding by itself does not add a legend or distinguishing features to the marks. chartleft = (alt.Chart(mpg). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, ). transform_loess(&quot;displ&quot;, &quot;hwy&quot;). mark_line() ) chartmiddle = (alt.Chart(mpg). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, detail = &quot;drv&quot; ). transform_loess(&quot;displ&quot;, &quot;hwy&quot;, groupby = [&quot;drv&quot;]). mark_line() ) chartright = (alt.Chart(mpg). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, color=alt.Color(&quot;drv&quot;, legend=None) ). transform_loess(&quot;displ&quot;, &quot;hwy&quot;, groupby = [&quot;drv&quot;]). mark_line() ) chartleft.save(&quot;screenshots/altair_chartleft.png&quot;) chartmiddle.save(&quot;screenshots/altair_chartmiddle.png&quot;) chartright.save(&quot;screenshots/altair_chartright.png&quot;) To display multiple marks in the same plot, you can used layered charts as shown in the example below that uses the chartleft object from the above code chunk: chartp = (alt.Chart(mpg). encode( x = &quot;displ&quot;, y = &quot;hwy&quot; ). mark_point() ) chart = chartp + chartleft chart.save(&quot;screenshots/altair_chartcombine.png&quot;) This, however, introduces some duplication in our code. Imagine if you wanted to change the y-axis to display cty instead of hwy. You’d need to change the variable in two places, and you might forget to update one. You can avoid this type of repetition by passing a set of encodings to a base alt.Chart(). Altair will treat these encodings as global encodings that apply to each mark layer in the layered chart. In other words, this code will produce the same plot as the previous code: base =(alt.Chart(mpg). encode( x = &quot;displ&quot;, y = &quot;hwy&quot; ) ) chart = base.mark_point() + base.transform_loess(&quot;displ&quot;, &quot;hwy&quot;).mark_line() chart.save(&quot;screenshots/altair_combine_clean.png&quot;) If you place encodings in an encode function, Altair will treat them as local mappings for the layer. It will use these mappings to extend or overwrite the base encodings for that layer only. This makes it possible to display different aesthetics in different layers. Alatair automatically chooses useful plot settings and chart configurations to allow you to think about data instead of the programming mechanics of the chart. You can review their guidance on customizing visualizations to see the varied ways to change the look of your graphic. base =(alt.Chart(mpg). encode( x = &quot;displ&quot;, y = &quot;hwy&quot; ) ) chart = base.encode(color = &quot;drv&quot;).mark_point() + base.transform_loess(&quot;displ&quot;, &quot;hwy&quot;).mark_line() chart.save(&quot;screenshots/altair_combine_clean_color.png&quot;) You can use the same idea to specify different data for each layer. Here, our smooth line displays just a subset of the mpg dataset, the subcompact cars. The local data argument in geom_smooth() overrides the global data argument in ggplot() for that layer only. #column name of class does not work nicely with Altair filter. base = (alt.Chart(mpg.rename(columns = {&quot;class&quot;: &quot;class1&quot;})). encode( x = &quot;displ&quot;, y = &quot;hwy&quot; ) ) chart_smooth_sub = (base. transform_filter( alt.datum.class1 == &quot;subcompact&quot; ). transform_loess(&quot;displ&quot;, &quot;hwy&quot;). mark_line() ) chart = base.encode(color = &quot;class1&quot;).mark_point() + chart_smooth_sub chart.save(&quot;screenshots/altair_combine_clean_color_filter.png&quot;) (You’ll learn how pandas filter works in the chapter on data transformations. To keep the same base chart, filtering is done with Altair in this example: for now, just know that this command selects only the subcompact cars.) 3.6.1 Exercises What geom would you use to draw a line chart? A boxplot? A histogram? An area chart? What does legend=None in alt.Color() do? What happens if you remove it? Why do you think I used it earlier in the chapter? Recreate the Python code necessary to generate the following graphs. 3.7 Statistical transformations Next, let’s take a look at a bar chart. Bar charts seem simple, but they are interesting because they reveal something subtle about plots. Consider a basic bar chart, as drawn with mark_bar(). The following chart displays the total number of diamonds in the diamonds dataset, grouped by cut. The diamonds dataset comes in ggplot2 R package and can be used in Python using the following Python command. Note that we also need to use pandas to format a few of the columns as ordered categorical to have the diamonds DataFrame act like it does in R. diamonds = pd.read_csv(&quot;https://github.com/byuidatascience/data4python4ds/raw/master/data-raw/diamonds/diamonds.csv&quot;) diamonds[&#39;cut&#39;] = pd.Categorical(diamonds.cut, ordered = True, categories = [&quot;Fair&quot;, &quot;Good&quot;, &quot;Very Good&quot;, &quot;Premium&quot;, &quot;Ideal&quot; ]) diamonds[&#39;color&#39;] = pd.Categorical(diamonds.color, ordered = True, categories = [&quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;]) diamonds[&#39;clarity&#39;] = pd.Categorical(diamonds.clarity, ordered = True, categories = [&quot;I1&quot;, &quot;SI2&quot;, &quot;SI1&quot;, &quot;VS2&quot;, &quot;VS1&quot;, &quot;VVS2&quot;, &quot;VVS1&quot;, &quot;IF&quot;]) It contains information about ~54,000 diamonds, including the price, carat, color, clarity, and cut of each diamond. The chart shows that more diamonds are available with high quality cuts than with low quality cuts. chart = (alt.Chart(diamonds). encode( x = &quot;cut&quot;, y = alt.Y(&quot;count():Q&quot;) ). mark_bar(). properties(width = 400) ) chart.save(&quot;screenshots/altair_diamond_bar.png&quot;) On the x-axis, the chart displays cut, a variable from diamonds. On the y-axis, it displays count, but count is not a variable in diamonds! Many graphs, like scatterplots, plot the raw values of your dataset. Other graphs, like bar charts, calculate new values to plot: bar charts, histograms, and frequency polygons bin your data and then plot bin counts, the number of points that fall in each bin. smoothers fit a model to your data and then plot predictions from the model. boxplots compute a robust summary of the distribution and then display a specially formatted box. The algorithm used to calculate new values for a graph is called a transform, short for transformation. The figure below describes how this process works with mark_bar(). You must explicitely define the transformation a mark uses through transformations using alt.Y() or alt.X() function. For example, mark_bar() requires the y encoding alt.Y(\"count():Q\"). A histogram is created using mark_bar() with transformations on both the x and y axes. The bin argument accepts a boolean or an alt.Bin() function where the argument maxbins can be used - bin=alt.Bin(maxbins=100). chart = (alt.Chart(diamonds). encode( x =alt.X(&quot;price&quot;, bin=True), y =alt.Y(&quot;count()&quot;) ). mark_bar() ) chart.save(&quot;screenshots/altair_histogram.png&quot;) For more complicated transformations Altair provides transform functions. We saw one of these transforms previously when we used mark_line() to describe each drive type. If you are working with pandas DataFrames then you may want to do these transformations using pandas. Altair’s transformations can be used with DataFrames as well as JSON files or URL pointers to CSV files. chartright = (alt.Chart(mpg). encode( x = &quot;displ&quot;, y = &quot;hwy&quot;, color=alt.Color(&quot;drv&quot;, legend=None) ). transform_loess(&quot;displ&quot;, &quot;hwy&quot;, groupby = [&quot;drv&quot;]). mark_line() ) Finally, mark_boxplot() is available which does the statistical transformations for you after you specify the encodings for the x and y axes. chart = (alt.Chart(diamonds). encode( y =&quot;price&quot;, x =&quot;cut&quot; ). mark_boxplot(size = 25). properties(width = 200) ) chart.save(&quot;screenshots/altair_boxplot.png&quot;) "]
]
